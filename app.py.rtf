{\rtf1\ansi\ansicpg1252\cocoartf2822
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red111\green14\blue195;\red236\green241\blue247;\red0\green0\blue0;
\red77\green80\blue85;\red24\green112\blue43;}
{\*\expandedcolortbl;;\cssrgb\c51765\c18824\c80784;\cssrgb\c94118\c95686\c97647;\cssrgb\c0\c0\c0;
\cssrgb\c37255\c38824\c40784;\cssrgb\c9412\c50196\c21961;}
\paperw11900\paperh16840\margl1440\margr1440\vieww33700\viewh19940\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 import\cf0 \strokec4  streamlit \cf2 \strokec2 as\cf0 \strokec4  st\cb1 \
\cf2 \cb3 \strokec2 import\cf0 \strokec4  requests\cb1 \
\cf2 \cb3 \strokec2 import\cf0 \strokec4  json\cb1 \
\
\pard\pardeftab720\partightenfactor0
\cf5 \cb3 \strokec5 # --- Page Configuration ---\cf0 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf0 \cb3 st.set_page_config(\cb1 \
\cb3     page_title=\cf6 \strokec6 "SDR Prep Gem \uc0\u10024 "\cf0 \strokec4 ,\cb1 \
\cb3     page_icon=\cf6 \strokec6 "\uc0\u10024 "\cf0 \strokec4 ,\cb1 \
\cb3     layout=\cf6 \strokec6 "wide"\cf0 \cb1 \strokec4 \
\cb3 )\cb1 \
\
\pard\pardeftab720\partightenfactor0
\cf5 \cb3 \strokec5 # --- GEMINI API INTEGRATION ---\cf0 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \strokec2 def\cf0 \strokec4  call_gemini(form_data):\cb1 \
\pard\pardeftab720\partightenfactor0
\cf0 \cb3     \cf6 \strokec6 """\cf0 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf6 \cb3 \strokec6     Calls the Gemini API to get AI-generated insights for the SDR briefing.\cf0 \cb1 \strokec4 \
\cf6 \cb3 \strokec6     Uses Streamlit Secrets for the API key.\cf0 \cb1 \strokec4 \
\cf6 \cb3 \strokec6     """\cf0 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf0 \cb3     \cf2 \strokec2 try\cf0 \strokec4 :\cb1 \
\cb3         \cf5 \strokec5 # Access the API key from Streamlit's secrets management\cf0 \cb1 \strokec4 \
\cb3         api_key = st.secrets[\cf6 \strokec6 "GEMINI_API_KEY"\cf0 \strokec4 ]\cb1 \
\cb3     \cf2 \strokec2 except\cf0 \strokec4  (KeyError, FileNotFoundError):\cb1 \
\cb3         st.error(\cf6 \strokec6 "GEMINI_API_KEY not found in Streamlit Secrets. Please add it to your secrets.toml file or in the Streamlit Community Cloud settings."\cf0 \strokec4 )\cb1 \
\cb3         st.stop()\cb1 \
\cb3         \cb1 \
\cb3     api_url = \cf6 \strokec6 f"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=\cf0 \strokec4 \{api_key\}\cf6 \strokec6 "\cf0 \cb1 \strokec4 \
\
\cb3     prompt = \cf6 \strokec6 f"""\cf0 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf6 \cb3 \strokec6         You are an expert sales strategist and coach at Snowflake, specializing in the MEDDPICC methodology. \cf0 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf0 \cb3         Your task \cf2 \strokec2 is\cf0 \strokec4  to generate a complete pre-call briefing package \cf2 \strokec2 for\cf0 \strokec4  a Sales Development Representative based on the following information.\cb1 \
\
\cb3         **Prospect Information:**\cb1 \
\cb3         - Name: \{form_data[\cf6 \strokec6 'personaName'\cf0 \strokec4 ]\}\cb1 \
\cb3         - Title: \{form_data[\cf6 \strokec6 'title'\cf0 \strokec4 ]\}\cb1 \
\cb3         - Account: \{form_data[\cf6 \strokec6 'accountName'\cf0 \strokec4 ]\}\cb1 \
\cb3         - Status: \{form_data[\cf6 \strokec6 'status'\cf0 \strokec4 ]\}\cb1 \
\cb3         - LinkedIn Info: \{form_data[\cf6 \strokec6 'linkedinInfo'\cf0 \strokec4 ]\}\cb1 \
\cb3         - Other Info: \{form_data[\cf6 \strokec6 'supportingInfo'\cf0 \strokec4 ]\}\cb1 \
\
\cb3         Generate a JSON \cf2 \strokec2 object\cf0 \strokec4  \cf2 \strokec2 with\cf0 \strokec4  the following structure. Do \cf2 \strokec2 not\cf0 \strokec4  include \cf2 \strokec2 any\cf0 \strokec4  other text \cf2 \strokec2 or\cf0 \strokec4  markdown formatting.\cb1 \
\cb3     \cf6 \strokec6 """\cf0 \cb1 \strokec4 \
\
\pard\pardeftab720\partightenfactor0
\cf6 \cb3 \strokec6     # This is the JSON schema the AI will follow for its response\cf0 \cb1 \strokec4 \
\cf6 \cb3 \strokec6     payload = \{\cf0 \cb1 \strokec4 \
\cf6 \cb3 \strokec6         "contents": [\{"role": "user", "parts": [\{"text": prompt\}]\}],\cf0 \cb1 \strokec4 \
\cf6 \cb3 \strokec6         "generationConfig": \{\cf0 \cb1 \strokec4 \
\cf6 \cb3 \strokec6             "responseMimeType": "application/json",\cf0 \cb1 \strokec4 \
\cf6 \cb3 \strokec6             "responseSchema": \{\cf0 \cb1 \strokec4 \
\cf6 \cb3 \strokec6                 "type": "OBJECT",\cf0 \cb1 \strokec4 \
\cf6 \cb3 \strokec6                 "properties": \{\cf0 \cb1 \strokec4 \
\cf6 \cb3 \strokec6                     "justification": \{"type": "STRING"\},\cf0 \cb1 \strokec4 \
\cf6 \cb3 \strokec6                     "useCase": \{"type": "STRING"\},\cf0 \cb1 \strokec4 \
\cf6 \cb3 \strokec6                     "discoveryQuestions": \{"type": "ARRAY", "items": \{"type": "STRING"\}\},\cf0 \cb1 \strokec4 \
\cf6 \cb3 \strokec6                     "openingStatements": \{\cf0 \cb1 \strokec4 \
\cf6 \cb3 \strokec6                         "type": "ARRAY",\cf0 \cb1 \strokec4 \
\cf6 \cb3 \strokec6                         "items": \{\cf0 \cb1 \strokec4 \
\cf6 \cb3 \strokec6                             "type": "OBJECT",\cf0 \cb1 \strokec4 \
\cf6 \cb3 \strokec6                             "properties": \{\cf0 \cb1 \strokec4 \
\cf6 \cb3 \strokec6                                 "type": \{"type": "STRING"\},\cf0 \cb1 \strokec4 \
\cf6 \cb3 \strokec6                                 "statement": \{"type": "STRING"\}\cf0 \cb1 \strokec4 \
\cf6 \cb3 \strokec6                             \},\cf0 \cb1 \strokec4 \
\cf6 \cb3 \strokec6                             "required": ["type", "statement"]\cf0 \cb1 \strokec4 \
\cf6 \cb3 \strokec6                         \}\cf0 \cb1 \strokec4 \
\cf6 \cb3 \strokec6                     \}\cf0 \cb1 \strokec4 \
\cf6 \cb3 \strokec6                 \},\cf0 \cb1 \strokec4 \
\cf6 \cb3 \strokec6                 "required": ["justification", "useCase", "discoveryQuestions", "openingStatements"]\cf0 \cb1 \strokec4 \
\cf6 \cb3 \strokec6             \}\cf0 \cb1 \strokec4 \
\cf6 \cb3 \strokec6         \}\cf0 \cb1 \strokec4 \
\cf6 \cb3 \strokec6     \}\cf0 \cb1 \strokec4 \
\
\cf6 \cb3 \strokec6     try:\cf0 \cb1 \strokec4 \
\cf6 \cb3 \strokec6         response = requests.post(api_url, json=payload)\cf0 \cb1 \strokec4 \
\cf6 \cb3 \strokec6         response.raise_for_status()  # Raises an HTTPError for bad responses\cf0 \cb1 \strokec4 \
\cf6 \cb3 \strokec6         \cf0 \cb1 \strokec4 \
\cf6 \cb3 \strokec6         result = response.json()\cf0 \cb1 \strokec4 \
\
\cf6 \cb3 \strokec6         if 'candidates' in result and result['candidates']:\cf0 \cb1 \strokec4 \
\cf6 \cb3 \strokec6             raw_json = result['candidates'][0]['content']['parts'][0]['text']\cf0 \cb1 \strokec4 \
\cf6 \cb3 \strokec6             return json.loads(raw_json)\cf0 \cb1 \strokec4 \
\cf6 \cb3 \strokec6         else:\cf0 \cb1 \strokec4 \
\cf6 \cb3 \strokec6             st.error("Error: Invalid response structure from Gemini API.")\cf0 \cb1 \strokec4 \
\cf6 \cb3 \strokec6             st.json(result) # Display the invalid response for debugging\cf0 \cb1 \strokec4 \
\cf6 \cb3 \strokec6             return None\cf0 \cb1 \strokec4 \
\
\cf6 \cb3 \strokec6     except requests.exceptions.RequestException as e:\cf0 \cb1 \strokec4 \
\cf6 \cb3 \strokec6         st.error(f"Error: API call failed: \{e\}")\cf0 \cb1 \strokec4 \
\cf6 \cb3 \strokec6         return None\cf0 \cb1 \strokec4 \
\cf6 \cb3 \strokec6     except json.JSONDecodeError:\cf0 \cb1 \strokec4 \
\cf6 \cb3 \strokec6         st.error("Error: Failed to decode JSON from API response.")\cf0 \cb1 \strokec4 \
\cf6 \cb3 \strokec6         return None\cf0 \cb1 \strokec4 \
\
\
\cf6 \cb3 \strokec6 # --- HELPER FUNCTIONS ---\cf0 \cb1 \strokec4 \
\cf6 \cb3 \strokec6 def get_customer_reference(use_case):\cf0 \cb1 \strokec4 \
\cf6 \cb3 \strokec6     """\cf0 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf0 \cb3     Returns a relevant customer reference based on the use \cf2 \strokec2 case\cf0 \strokec4 .\cb1 \
\cb3     \cf6 \strokec6 """\cf0 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf6 \cb3 \strokec6     lower_case = use_case.lower()\cf0 \cb1 \strokec4 \
\cf6 \cb3 \strokec6     if 'application' in lower_case:\cf0 \cb1 \strokec4 \
\cf6 \cb3 \strokec6         return "Instacart built their data-intensive applications on Snowflake, allowing them to scale to millions of users while reducing their infrastructure costs by 30%."\cf0 \cb1 \strokec4 \
\cf6 \cb3 \strokec6     if 'ai' in lower_case or 'ml' in lower_case:\cf0 \cb1 \strokec4 \
\cf6 \cb3 \strokec6         return "Western Union leveraged Snowflake to reduce the development time for their fraud detection models by 75% and can now deploy new AI models in days instead of months."\cf0 \cb1 \strokec4 \
\cf6 \cb3 \strokec6     if 'finance' in lower_case:\cf0 \cb1 \strokec4 \
\cf6 \cb3 \strokec6         return "BlackRock runs its Aladdin platform on Snowflake, processing trillions of dollars in financial transactions and providing clients with near real-time investment insights."\cf0 \cb1 \strokec4 \
\cf6 \cb3 \strokec6     return "Capital One modernized their data stack with Snowflake to enable better customer experiences and faster innovation, all within a secure and governed environment."\cf0 \cb1 \strokec4 \
\
\cf6 \cb3 \strokec6 # --- STREAMLIT UI ---\cf0 \cb1 \strokec4 \
\cf6 \cb3 \strokec6 st.title("Snowflake SDR Prep Gem \uc0\u10024 ")\cf0 \cb1 \strokec4 \
\cf6 \cb3 \strokec6 st.markdown("Fill out the details below to generate a comprehensive, AI-powered pre-call briefing.")\cf0 \cb1 \strokec4 \
\
\cf6 \cb3 \strokec6 # Use a form to gather all inputs and submit with a single button\cf0 \cb1 \strokec4 \
\cf6 \cb3 \strokec6 with st.form(key='sdr_form'):\cf0 \cb1 \strokec4 \
\cf6 \cb3 \strokec6     st.subheader("1. Enter Prospect Details")\cf0 \cb1 \strokec4 \
\cf6 \cb3 \strokec6     col1, col2 = st.columns(2)\cf0 \cb1 \strokec4 \
\cf6 \cb3 \strokec6     with col1:\cf0 \cb1 \strokec4 \
\cf6 \cb3 \strokec6         persona_name = st.text_input("Persona Name", "Jane Doe")\cf0 \cb1 \strokec4 \
\cf6 \cb3 \strokec6         account_name = st.text_input("Account Name", "InnovateFin")\cf0 \cb1 \strokec4 \
\cf6 \cb3 \strokec6     with col2:\cf0 \cb1 \strokec4 \
\cf6 \cb3 \strokec6         title = st.text_input("Title", "VP of Engineering")\cf0 \cb1 \strokec4 \
\cf6 \cb3 \strokec6         status = st.radio("Status", ('Prospect', 'Customer'), horizontal=True)\cf0 \cb1 \strokec4 \
\
\cf6 \cb3 \strokec6     linkedin_info = st.text_area("Optional LinkedIn Info", "Recently promoted. Background in scaling distributed systems and cloud infrastructure. Posted an article last month about the challenges of managing multi-cloud data pipelines.", height=100)\cf0 \cb1 \strokec4 \
\cf6 \cb3 \strokec6     supporting_info = st.text_area("Other Supporting Info (Triggers, news, etc.)", "InnovateFin just announced a new AI-powered risk assessment product. They are hiring aggressively for data scientists and ML engineers.", height=100)\cf0 \cb1 \strokec4 \
\cf6 \cb3 \strokec6     \cf0 \cb1 \strokec4 \
\cf6 \cb3 \strokec6     submit_button = st.form_submit_button(label='\uc0\u10024  Generate AI Briefing')\cf0 \cb1 \strokec4 \
\
\cf6 \cb3 \strokec6 # --- Main Logic ---\cf0 \cb1 \strokec4 \
\cf6 \cb3 \strokec6 if submit_button:\cf0 \cb1 \strokec4 \
\cf6 \cb3 \strokec6     # Package form data\cf0 \cb1 \strokec4 \
\cf6 \cb3 \strokec6     form_data = \{\cf0 \cb1 \strokec4 \
\cf6 \cb3 \strokec6         'personaName': persona_name,\cf0 \cb1 \strokec4 \
\cf6 \cb3 \strokec6         'title': title,\cf0 \cb1 \strokec4 \
\cf6 \cb3 \strokec6         'accountName': account_name,\cf0 \cb1 \strokec4 \
\cf6 \cb3 \strokec6         'status': status,\cf0 \cb1 \strokec4 \
\cf6 \cb3 \strokec6         'linkedinInfo': linkedin_info,\cf0 \cb1 \strokec4 \
\cf6 \cb3 \strokec6         'supportingInfo': supporting_info\cf0 \cb1 \strokec4 \
\cf6 \cb3 \strokec6     \}\cf0 \cb1 \strokec4 \
\
\cf6 \cb3 \strokec6     with st.spinner("\uc0\u10024  The Gem is consulting the AI... please wait."):\cf0 \cb1 \strokec4 \
\cf6 \cb3 \strokec6         ai_data = call_gemini(form_data)\cf0 \cb1 \strokec4 \
\
\cf6 \cb3 \strokec6     if ai_data:\cf0 \cb1 \strokec4 \
\cf6 \cb3 \strokec6         st.balloons()\cf0 \cb1 \strokec4 \
\cf6 \cb3 \strokec6         st.header(f"Pre-Call Briefing: \{form_data['personaName']\} at \{form_data['accountName']\}")\cf0 \cb1 \strokec4 \
\cf6 \cb3 \strokec6         \cf0 \cb1 \strokec4 \
\cf6 \cb3 \strokec6         # Display At-a-Glance Intel\cf0 \cb1 \strokec4 \
\cf6 \cb3 \strokec6         st.subheader("1. At-a-Glance Intel")\cf0 \cb1 \strokec4 \
\cf6 \cb3 \strokec6         st.markdown(f"""\cf0 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf0 \cb3         - **Persona:** \{form_data[\cf6 \strokec6 'personaName'\cf0 \strokec4 ]\}, \{form_data[\cf6 \strokec6 'title'\cf0 \strokec4 ]\}\cb1 \
\cb3         - **Account:** \{form_data[\cf6 \strokec6 'accountName'\cf0 \strokec4 ]\} (\{form_data[\cf6 \strokec6 'status'\cf0 \strokec4 ]\})\cb1 \
\cb3         - **LinkedIn Intel:** \{form_data[\cf6 \strokec6 'linkedinInfo'\cf0 \strokec4 ] \cf2 \strokec2 or\cf0 \strokec4  \cf6 \strokec6 'Not provided.'\cf0 \strokec4 \}\cb1 \
\cb3         - **Key Trigger Intel:** \{form_data[\cf6 \strokec6 'supportingInfo'\cf0 \strokec4 ] \cf2 \strokec2 or\cf0 \strokec4  \cf6 \strokec6 'Not provided.'\cf0 \strokec4 \}\cb1 \
\cb3         \cf6 \strokec6 """)\cf0 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf6 \cb3 \strokec6         st.divider()\cf0 \cb1 \strokec4 \
\
\cf6 \cb3 \strokec6         # Display "Why You, Why Now"\cf0 \cb1 \strokec4 \
\cf6 \cb3 \strokec6         st.subheader("2. The 'Why You, Why Now'")\cf0 \cb1 \strokec4 \
\cf6 \cb3 \strokec6         st.markdown(f"**\uc0\u10024  Justification:** *\{ai_data['justification']\}*")\cf0 \cb1 \strokec4 \
\cf6 \cb3 \strokec6         st.markdown(f"**\uc0\u10024  Recommended Use Case:** \{ai_data['useCase']\}")\cf0 \cb1 \strokec4 \
\cf6 \cb3 \strokec6         st.markdown(f"**- Relevant Customer Reference:** \{get_customer_reference(ai_data['useCase'])\}")\cf0 \cb1 \strokec4 \
\cf6 \cb3 \strokec6         st.divider()\cf0 \cb1 \strokec4 \
\cf6 \cb3 \strokec6         \cf0 \cb1 \strokec4 \
\cf6 \cb3 \strokec6         # Display Conversation Toolkit\cf0 \cb1 \strokec4 \
\cf6 \cb3 \strokec6         st.subheader("3. Conversation Toolkit")\cf0 \cb1 \strokec4 \
\cf6 \cb3 \strokec6         \cf0 \cb1 \strokec4 \
\cf6 \cb3 \strokec6         st.markdown("##### \uc0\u10024  Powerful Opening Statements")\cf0 \cb1 \strokec4 \
\cf6 \cb3 \strokec6         openers_text = ""\cf0 \cb1 \strokec4 \
\cf6 \cb3 \strokec6         for opener in ai_data['openingStatements']:\cf0 \cb1 \strokec4 \
\cf6 \cb3 \strokec6             statement = opener['statement'].replace('[Persona Name]', form_data['personaName']).replace('[SDR Name]', '[Your Name]')\cf0 \cb1 \strokec4 \
\cf6 \cb3 \strokec6             openers_text += f"- **\{opener['type']\}:** \\"\{statement\}\\"\\n"\cf0 \cb1 \strokec4 \
\cf6 \cb3 \strokec6         st.markdown(openers_text)\cf0 \cb1 \strokec4 \
\
\cf6 \cb3 \strokec6         st.markdown("##### \uc0\u10024  MEDDPICC Discovery Questions")\cf0 \cb1 \strokec4 \
\cf6 \cb3 \strokec6         questions_text = ""\cf0 \cb1 \strokec4 \
\cf6 \cb3 \strokec6         for question in ai_data['discoveryQuestions']:\cf0 \cb1 \strokec4 \
\cf6 \cb3 \strokec6             questions_text += f"- \{question\}\\n"\cf0 \cb1 \strokec4 \
\cf6 \cb3 \strokec6         st.markdown(questions_text)\cf0 \cb1 \strokec4 \
\
}